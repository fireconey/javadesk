装饰器使用了闭包的原理，闭包可以注入语法，同时传入此语法的参数。

不过思想是在一个函数执行前进行一些操作


def hu(fun):
     def ji(x):
            print ("第一个")
           fun(x)
          print("第二个")
    return ji  #返回对象而不是函数，如果是函数要指定具体的参数
	
@hu         #使用了语法糖类似 p=uo(p) ，
def p(x):      #如果hu函数上面还有一层函数fr（ar）可以@fr（ar=2）
       print (x)               



#也可以不使用语法糖

p=hu(p)    #第一个p是隐去定义的p函数。使直接使用p函数就有装饰的效果
                   #第二个必须是对象，如果是函数则后期使用p（4)就会报错'
                   #NoneType' object is not callable

print(lp(0)) 


#如果在初始化时使用：
p=hu(p(2))
他是把p（2）的结果给hu不是语法注入
由于hu中的参数是2，在子函数中又有fun（x)函数
变成了2（x)函数，赋值后变成了2（3），所以会出错'int' object is not callable

